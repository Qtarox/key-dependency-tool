#include "gift.h"
#include <random>

using namespace std;

static mt19937 rand_generator;

static void conversion(uint8_t alpha[30][16],uint32_t trail_rounds,uint16_t key_diff[8],int size)
{
	uint16_t key_diff_temp[8] = {0};
	for (int i = 0; i < 8; i++) key_diff_temp[i] = key_diff[i];

	for (int i = 0; i < trail_rounds-1; i++){ keyScheduleRoundFunction(key_diff_temp);}
	if (SIZE == 4) Permutation(alpha[trail_rounds]);
	if (SIZE == 8) Permutation8(alpha[trail_rounds]);
}

static bool sanityCheck(uint8_t alpha[30][16],uint32_t trail_rounds,uint16_t key_diff[8],int size)
{
	uint32_t DDT[16][16] = {0};
	computeDDT(DDT);

	uint16_t key_diff_temp[8];
	uint8_t state_temp_before[16];
	uint8_t state_temp_after[16];
	for (int i = 0; i < 8; i++) key_diff_temp[i] = key_diff[i];
	for (uint32_t n = 0; n < trail_rounds; n++)
	{
		for (int i = 0; i < 16; i++) state_temp_before[i] = alpha[n][i];
		for (int i = 0; i < 16; i++) state_temp_after[i] = alpha[n+1][i];
		AddRoundKey(state_temp_before,key_diff_temp);
		if (SIZE == 4) 
		{
			invPermutation(state_temp_after);
			for (int i = 0; i < 16; i++)
			{
				if (DDT[state_temp_before[i]][state_temp_after[i]] == 0) 
				{
					std::cout << "Error in round: " << n << ", pos: " << i << ", input: " << int(state_temp_before[i]) << ", output: " << int(state_temp_after[i]) << std::endl;
					return false;
				}
			}
		}
		if (SIZE == 8) 
		{
			invPermutation8(state_temp_after);
			for (int i = 0; i < 16; i++)
			{
				if (DDT[state_temp_before[i]>>4][state_temp_after[i]>>4] == 0) 
				{
					std::cout << "Error in round: " << n << ", pos: " << i << ", input: " << int(state_temp_before[i]) << ", output: " << int(state_temp_after[i]) << std::endl;
					return false;
				}
				if (DDT[state_temp_before[i]&0xf][state_temp_after[i]&0xf] == 0) 
				{
					std::cout << "Error in round: " << n << ", pos: " << i << ", input: " << int(state_temp_before[i]) << ", output: " << int(state_temp_after[i]) << std::endl;
					return false;
				}
			}
		}
		keyScheduleRoundFunction(key_diff_temp);
	}
	return true;
}

void SK_4_2021_1179_1(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 13;
	uint8_t alpha_temp[30][16] = {
	{0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2},
	{0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1},
	{0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1},
	{0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0},
	{0x0,0x0,0x0,0x4,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0}};
	uint8_t key_diff_temp[8] = {0};
	for (uint32_t n = 0; n < trail_rounds+1; n++) { for (int i = 0; i < 16; i++) alpha[n][i] = alpha_temp[n][i];}
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,4))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}

void SK_4_2021_1179_2(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 13;
	uint8_t alpha_temp[30][16] = {
	{0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2},
	{0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0},
	{0x0,0x0,0x0,0x4,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0}};
	uint8_t key_diff_temp[8] = {0};
	for (uint32_t n = 0; n < trail_rounds+1; n++) { for (int i = 0; i < 16; i++) alpha[n][i] = alpha_temp[n][i];}
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,4))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}

void SK_4_2021_1179_3(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 13;
	uint8_t alpha_temp[30][16] = {
	{0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2},
	{0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1},
	{0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0},
	{0x0,0x0,0x0,0x4,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0}};
	uint8_t key_diff_temp[8] = {0};
	for (uint32_t n = 0; n < trail_rounds+1; n++) { for (int i = 0; i < 16; i++) alpha[n][i] = alpha_temp[n][i];}
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,4))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}


void SK_4_2019_49_9(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 9;
	uint8_t alpha_temp[30][16] = {
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5},
	{0x0,0x8,0x0,0x8,0x0,0x4,0x0,0x4,0x0,0x2,0x0,0x2,0x0,0x1,0x0,0x1}}; // made some changes to this 
	uint8_t key_diff_temp[8] = {0};
	for (uint32_t n = 0; n < trail_rounds+1; n++) { for (int i = 0; i < 16; i++) alpha[n][i] = alpha_temp[n][i];}
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,4))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}

void SK_4_2019_49_12(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 12;
	uint8_t alpha_temp[30][16] = {
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5}};
	uint8_t key_diff_temp[8] = {0};
	for (uint32_t n = 0; n < trail_rounds+1; n++) { for (int i = 0; i < 16; i++) alpha[n][i] = alpha_temp[n][i];}
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,4))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}

void SK_4_2019_49_13(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 13;
	uint8_t alpha_temp[30][16] = {
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5},
	{0x0,0x8,0x0,0x8,0x0,0x4,0x0,0x4,0x0,0x2,0x0,0x2,0x0,0x1,0x0,0x1}};
	uint8_t key_diff_temp[8] = {0};
	for (uint32_t n = 0; n < trail_rounds+1; n++) { for (int i = 0; i < 16; i++) alpha[n][i] = alpha_temp[n][i];}
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,4))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}

void SK_4_2018_390_Table4(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 12;
	uint8_t alpha_temp[30][16] = {
	{0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x2,0x0},
	{0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0},
	{0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0xa},
	{0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1},
	{0x1,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0}};
	uint8_t key_diff_temp[8] = {0};
	for (uint32_t n = 0; n < trail_rounds+1; n++) { for (int i = 0; i < 16; i++) alpha[n][i] = alpha_temp[n][i];}
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,4))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}

void SK_4_2018_390_Table6(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 12;
	uint8_t alpha_temp[30][16] = {
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1},
	{0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1},
	{0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1},
	{0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0},
	{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0}};
	uint8_t key_diff_temp[8] = {0};
	for (uint32_t n = 0; n < trail_rounds+1; n++) { for (int i = 0; i < 16; i++) alpha[n][i] = alpha_temp[n][i];}
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,4))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}

void randomTrail4(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 10;
	uniform_int_distribution<uint8_t> rng8(0, 0xf);
	rand_generator.seed(time(0));
	uint32_t DDT[16][16] = {0};
	computeDDT(DDT);
	uint8_t rand_num;
	uint8_t temp[16];
	for (int i = 0; i < 16; i++) temp[i] = rng8(rand_generator);
	for (int i = 0; i < 16; i++) alpha[0][i] = temp[i];
	for (int n = 1; n < trail_rounds+1; n++)
	{
		// substitution
		for (int i = 0; i < 16; i++)
		{
			rand_num = rng8(rand_generator);
			while (DDT[temp[i]][rand_num] == 0) rand_num = rng8(rand_generator);
			temp[i] = rand_num;
		}
		Permutation(temp);
		for (int i = 0; i < 16; i++) alpha[n][i] = temp[i];
	}
	uint8_t key_diff_temp[8] = {0};
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,4))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}

void nonLinearTrail4(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 3;
	// uint8_t alpha_temp[30][16] = {
	// {0x1,0x0,0xc,0x0, 0x0,0x0,0x0,0x0, 0x1,0x0,0xc,0x0, 0x0,0x1,0x0,0x1},
	// {0x0,0x0,0x0,0xa, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0xa, 0xa,0x0,0xa,0x0},
	// {0x0,0x0,0x0,0x1, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x1, 0x1,0x0,0x1,0x0},
	// {0x0,0x0,0x0,0x0, 0x4,0x0,0x4,0xa, 0x0,0x0,0x0,0x0, 0x1,0x0,0x1,0xa}};
	uint8_t alpha_temp[30][16] = {
	{0x1,0x0,0xc,0x0, 0x0,0x0,0x0,0x0, 0x1,0x0,0xc,0x0, 0x0,0x1,0x0,0x1},
	{0x0,0x0,0x0,0xa, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0xa, 0xa,0x0,0xa,0x0},
	{0x0,0x0,0x0,0x1, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x1, 0x1,0x0,0x1,0x0},
	{0x8,0x0,0x8,0x0, 0x0,0x0,0x0,0xa, 0x0,0x0,0x0,0x0, 0x1,0x0,0x1,0xa}};
	uint8_t key_diff_temp[8] = {0};
	for (uint32_t n = 0; n < trail_rounds+1; n++) { for (int i = 0; i < 16; i++) alpha[n][i] = alpha_temp[n][i];}
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,4))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}


void SK_8_12_2019_25(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 12;
	uint8_t alpha_temp[30][16] = {
	{0x00,0x00,0x00,0x0A,0x00,0x00,0x0C,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x20,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x04,0x04,0x00,0x00,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x50,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0xA0},
	{0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00},
	{0x04,0x00,0x00,0x10,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x20}};
	uint8_t key_diff_temp[8] = {0};
	for (uint32_t n = 0; n < trail_rounds+1; n++) { for (int i = 0; i < 16; i++) alpha[n][i] = alpha_temp[n][i];}
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,8))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}

void SK_8_13_2019_25(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 13;
	uint8_t alpha_temp[30][16] = {
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0xC6,0x00},
	{0x00,0x00,0x01,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x10},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x00,0x00,0x02,0x02},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x05},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,0x0A,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00},
	{0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x02,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x20,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x40,0x00},
	{0x04,0x02,0x00,0x04,0x02,0x01,0x01,0x02,0x00,0x00,0x00,0x01,0x00,0x04,0x04,0x00}};
	uint8_t key_diff_temp[8] = {0};
	for (uint32_t n = 0; n < trail_rounds+1; n++) { for (int i = 0; i < 16; i++) alpha[n][i] = alpha_temp[n][i];}
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,8))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}

void SK_8_21_2019_25(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 21;
	uint8_t alpha_temp[30][16] = {
	{0x00,0x00,0x00,0x00,0x90,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00},
	{0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x20,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,0x00,0x20,0x20,0x00,0x00},
	{0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,0x0A,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x00,0x00,0x10,0x10,0x00,0x00},
	{0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,0x0A,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x00,0x00,0x10,0x10,0x00,0x00},
	{0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,0x0A,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x10,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x01,0x00,0x00,0x20,0x00,0x00}};
		uint8_t key_diff_temp[8] = {0};
	for (uint32_t n = 0; n < trail_rounds+1; n++) { for (int i = 0; i < 16; i++) alpha[n][i] = alpha_temp[n][i];}
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,8))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}


void SK_8_2019_49_21(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 21;
	uint8_t alpha_temp[30][16] = {
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x60,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0},
	{0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x20,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x40,0x40,0x00,0x00,0x20,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x00,0xa0,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x02,0x02,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x50,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x00,0xa0},
	{0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x20,0x20,0x00,0x00,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0xa0,0x00,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x04,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x40,0x01,0x00,0x00,0x20,0x00,0x00,0x00,0x10,0x04,0x00,0x00}};
	uint8_t key_diff_temp[8] = {0};
	for (uint32_t n = 0; n < trail_rounds+1; n++) { for (int i = 0; i < 16; i++) alpha[n][i] = alpha_temp[n][i];}
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,8))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}


void SK_8_2018_390_Table10(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 18;
	uint8_t alpha_temp[30][16] = {
	{0x00,0x00,0x00,0x00,0x70,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x00,0x00},
	{0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x20,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,0x00,0x20,0x20,0x00,0x00},
	{0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x0a,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x00,0x00,0x10,0x10,0x00,0x00},
	{0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x0a,0x00,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x90,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x10,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x20,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x20,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x20},
	{0x00,0x00,0x01,0x00,0x00,0x20,0x08,0x00,0x00,0x14,0x04,0x04,0x00,0x02,0x02,0x02}};
	uint8_t key_diff_temp[8] = {0};
	for (uint32_t n = 0; n < trail_rounds+1; n++) { for (int i = 0; i < 16; i++) alpha[n][i] = alpha_temp[n][i];}
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,8))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}

void SK_8_2018_390_Table15(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 12;
	uint8_t alpha_temp[30][16] = {
	{0x00,0x00,0x00,0x00,0x70,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x00,0x00},
	{0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x20,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,0x00,0x20,0x20,0x00,0x00},
	{0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x0a,0x00,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00},
	{0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x04,0x04,0x00,0x20,0x02,0x00,0x00,0x10,0x01,0x01,0x00,0x00}};
	uint8_t key_diff_temp[8] = {0};
	for (uint32_t n = 0; n < trail_rounds+1; n++) { for (int i = 0; i < 16; i++) alpha[n][i] = alpha_temp[n][i];}
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,8))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}

void SK_8_2018_390_Table16(uint8_t alpha[30][16], uint16_t key_diff[8], uint32_t& trail_rounds, int &TK_NUM)
{
	TK_NUM = 1;
	trail_rounds = 14;
	uint8_t alpha_temp[30][16] = {
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x06,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x10,0x00},
	{0x00,0x00,0x04,0x04,0x00,0x00,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x05,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x05,0x00,0x00},
	{0x00,0xa0,0x00,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x90,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x10,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x88},
	{0x00,0x00,0x00,0x01,0x00,0x40,0x00,0x20,0x00,0x00,0x00,0x12,0x00,0x10,0x00,0x03}};
	uint8_t key_diff_temp[8] = {0};
	for (uint32_t n = 0; n < trail_rounds+1; n++) { for (int i = 0; i < 16; i++) alpha[n][i] = alpha_temp[n][i];}
	for (int i = 0; i < 8; i++) key_diff[i] = key_diff_temp[i];
	if (!sanityCheck(alpha,trail_rounds,key_diff,8))
	{
		std::cout << "Insanity!" << std::endl;
		exit(0);
	}
}