#include <iostream>
#include <iomanip>
#include "deoxys.h"

using namespace std;

uint8_t RCON[17] = {0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72};
uint8_t Sbox[256] = 
{0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16};

uint8_t invSbox[256] = {
0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D};

uint8_t permSchedule[4][4] = {{4,5,6,7},{9,10,11,8},{14,15,12,13},{3,0,1,2}};
uint8_t invPermSchedule[4][4] = {{13,14,15,12},{0,1,2,3},{7,4,5,6},{10,11,8,9}};
uint8_t getSbox(uint8_t val) {return Sbox[val];}
uint8_t getInvSbox(uint8_t val) {return invSbox[val];}
uint8_t getConstants(uint8_t val) {return RCON[val];}
uint8_t getPermSchedule(uint8_t val) {return permSchedule[val/4][val%4];}
void transpose(uint8_t a[4][4]);

uint8_t mul2(uint8_t val)
{
	if ((val >> 7) == 1)
		return ((val << 1) ^ 0b00011011);
	else
		return (val << 1);
}
uint8_t mul3(uint8_t val)
{
	return mul2(val) ^ val;
}

uint8_t LFSR(uint8_t n, int v)
{
	uint8_t x7 = (n >> 7) % 2;
	uint8_t x6 = (n >> 6) % 2;
	uint8_t x5 = (n >> 5) % 2;
	uint8_t x4 = (n >> 4) % 2;
	uint8_t x3 = (n >> 3) % 2;
	uint8_t x2 = (n >> 2) % 2;
	uint8_t x1 = (n >> 1) % 2;
	uint8_t x0 = (n >> 0) % 2;
	if (v == 2) return (x6 << 7) ^ (x5 << 6) ^ (x4 << 5) ^ (x3 << 4) ^ (x2 << 3) ^ (x1 << 2) ^ (x0 << 1) ^ ((x7 ^ x5) << 0);
	else if (v == 3) return ((x0 ^ x6) << 7) ^ (x7 << 6) ^ (x6 << 5) ^ (x5 << 4) ^ (x4 << 3) ^ (x3 << 2) ^ (x2 << 1) ^ (x1 << 0);
}

uint8_t invLFSR(uint8_t n, int v)
{
	uint8_t x7 = (n >> 7) % 2;
	uint8_t x6 = (n >> 6) % 2;
	uint8_t x5 = (n >> 5) % 2;
	uint8_t x4 = (n >> 4) % 2;
	uint8_t x3 = (n >> 3) % 2;
	uint8_t x2 = (n >> 2) % 2;
	uint8_t x1 = (n >> 1) % 2;
	uint8_t x0 = (n >> 0) % 2;
	if (v == 2) return ((x6 ^ x0) << 7) ^ (x7 << 6) ^ (x6 << 5) ^ (x5 << 4) ^ (x4 << 3) ^ (x3 << 2) ^ (x2 << 1) ^ (x1 << 0);
	else if (v == 3) return (x6 << 7) ^ (x5 << 6) ^ (x4 << 5) ^ (x3 << 4) ^ (x2 << 3) ^ (x1 << 2)^ (x0 << 1) ^ (x7 ^ x5);
}

void perm(uint8_t key_state[4][4])
{
	uint8_t tmp[4][4];
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) 
		{
			tmp[r][c] = key_state[permSchedule[r][c]/4][permSchedule[r][c]%4];
		}
	}
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) key_state[r][c] = tmp[r][c];
	}
}

void invPerm(uint8_t key_state[4][4])
{
	uint8_t tmp[4][4];
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) tmp[r][c] = key_state[invPermSchedule[r][c]/4][invPermSchedule[r][c]%4];
	}
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) key_state[r][c] = tmp[r][c];
	}
}

void keyScheduleRoundFunction(uint8_t key_states[3][4][4])
{
	perm(key_states[0]);
	perm(key_states[1]);
	perm(key_states[2]);
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) 
		{
			key_states[1][r][c] = LFSR(key_states[1][r][c],2);
			key_states[2][r][c] = LFSR(key_states[2][r][c],3);
		}
	}
}

void Substitution(uint8_t state[4][4])
{
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) state[r][c] = Sbox[state[r][c]];
	}
}

void invSubstitution(uint8_t state[4][4])
{
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) state[r][c] = invSbox[state[r][c]];
	}
}

void SR(uint8_t state[4][4])
{
	uint8_t tmp[4][4];
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) tmp[r][c] = state[r][(c+r)%4];
	}
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) state[r][c] = tmp[r][c];
	}
}

void invSR(uint8_t state[4][4])
{
	uint8_t tmp[4][4];
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) tmp[r][c] = state[r][(4+c-r)%4];
	}
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) state[r][c] = tmp[r][c];
	}
}


void MC(uint8_t state[4][4])
{
	uint8_t tmp[4][4];
	for (int c = 0; c < 4; c++)
	{
		tmp[0][c] = mul2(state[0][c]) ^ mul3(state[1][c]) ^ state[2][c] ^ state[3][c];
		tmp[1][c] = state[0][c] ^ mul2(state[1][c]) ^ mul3(state[2][c]) ^ state[3][c];
		tmp[2][c] = state[0][c] ^ state[1][c] ^ mul2(state[2][c]) ^ mul3(state[3][c]);
		tmp[3][c] = mul3(state[0][c]) ^ state[1][c] ^ state[2][c] ^ mul2(state[3][c]);
	}
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) state[r][c] = tmp[r][c];
	}
}

void invMC(uint8_t state[4][4])
{
	MC(state);
	MC(state);
	MC(state);
}

void AddRoundTweakey(uint8_t state[4][4], uint8_t TK[3][4][4])
{
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++)
		{
			for (int k = 0; k < 3; k++)
			{
				state[r][c] ^= TK[k][r][c];
			}
		}
	}
}

void AddConstant(uint8_t state[4][4], int r)
{
	state[0][0] ^= 1; state[0][1] ^= RCON[r];
	state[1][0] ^= 2; state[1][1] ^= RCON[r];
	state[2][0] ^= 4; state[2][1] ^= RCON[r];
	state[3][0] ^= 8; state[3][1] ^= RCON[r];
}

void RoundFunction(uint8_t state[4][4], uint8_t TK[3][4][4], int r)
{
	Substitution(state);
	SR(state);
	MC(state);
	AddRoundTweakey(state,TK);
	AddConstant(state,r);
}

void InvRoundFunction(uint8_t state[4][4], uint8_t TK[3][4][4], int r)
{
	AddConstant(state,r);
	AddRoundTweakey(state,TK);
	invMC(state);
	invSR(state);
	invSubstitution(state);

}

void deoxys_encrypt(uint8_t state[4][4], uint8_t TK[3][4][4], int nr)
{
	AddRoundTweakey(state,TK);
	AddConstant(state,0);
	for (int r = 1; r <= nr; r++) 
	{ 
		keyScheduleRoundFunction(TK);
		RoundFunction(state,TK,r);
	}
}

void deoxys_decrypt(uint8_t state[4][4], uint8_t TK[3][4][4], int nr)
{
	uint8_t TK_ALL[17][3][4][4];
	for (int rd = 0; rd <= nr; rd++)
	{
		for (int k = 0; k < 3; k++)
		{
			for (int r = 0; r < 4; r++)
			{
				for (int c = 0; c < 4; c++)
				{
					TK_ALL[rd][k][r][c] = TK[k][r][c];
				}
			}
		}
		keyScheduleRoundFunction(TK);
	}
	for (int r = nr; r >= 1; r--) InvRoundFunction(state,TK_ALL[r],r);
	AddRoundTweakey(state,TK_ALL[0]);
	AddConstant(state,0);
}

void transpose(uint8_t a[4][4])
{
	uint8_t tmp[4][4];
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) tmp[c][r] = a[r][c];
	}
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) a[r][c] = tmp[r][c];
	}
}

void computeDDT(uint32_t DDT[256][256])
{
	for (int i = 0; i < 256; i++)
	{
		for (int j = 0; j < 256; j++) DDT[i][j] = 0;
	}
	for (int i = 0; i < 256; i++)
	{
		for (int j = 0; j < 256; j++) DDT[i^j][Sbox[i]^Sbox[j]]++;
	}
}

void computeXDDT(uint8_t x, uint8_t y, uint32_t xddt[256])
{
	for (int i = 0; i < 256; i++) xddt[i] = 0;
	for (int i = 0; i < 256; i++)
	{
		for (int j = 0; j < 256; j++) 
		{
			if (((i^j) == x) && ((Sbox[i]^Sbox[j]) == y)) xddt[i]++;
		}
	}

}

void computeYDDT(uint8_t x, uint8_t y, uint32_t yddt[256])
{
	for (int i = 0; i < 256; i++) yddt[i] = 0;
	for (int i = 0; i < 256; i++)
	{
		for (int j = 0; j < 256; j++) 
		{
			if (((i^j) == x) && ((Sbox[i]^Sbox[j]) == y)) yddt[Sbox[i]]++;
		}
	}
}



void test_vectors()
{
	uint8_t state11[4][4] = {{0x18,0x57,0xd4,0xed},{0xf0,0x80,0xe8,0xe2},{0xc8,0x3a,0xa9,0xe7},{0x94,0xeb,0xf9,0x0d}};
	uint8_t state12[4][4] = {{0x18,0x57,0xd4,0xed},{0xf0,0x80,0xe8,0xe2},{0xc8,0x3a,0xa9,0xe7},{0x94,0xeb,0xf9,0x0d}};
	uint8_t TK11[3][4][4] = {
	{{0x02,0x02,0x12,0x22},{0x32,0x42,0x52,0x62},{0x70,0x00,0x00,0x00},{0x00,0x00,0x00,0x00}},
	{{0x10,0x11,0x12,0x13},{0x14,0x15,0x16,0x17},{0x18,0x19,0x1a,0x1b},{0x1c,0x1d,0x1e,0x1f}},
	{{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00}}}; 
	uint8_t TK12[3][4][4] = {
	{{0x02,0x02,0x12,0x22},{0x32,0x42,0x52,0x62},{0x70,0x00,0x00,0x00},{0x00,0x00,0x00,0x00}},
	{{0x10,0x11,0x12,0x13},{0x14,0x15,0x16,0x17},{0x18,0x19,0x1a,0x1b},{0x1c,0x1d,0x1e,0x1f}},
	{{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00}}}; 
	uint8_t expected1[4][4] = {{0xf8,0x6e,0xca,0xd0},{0xd6,0x9d,0x2c,0x57},{0x3c,0xde,0xee,0x96},{0xc9,0x0f,0x37,0xac}};
	transpose(state11); transpose(TK11[0]); transpose(TK11[1]); transpose(TK11[2]); transpose(expected1);
	transpose(state12); transpose(TK12[0]); transpose(TK12[1]); transpose(TK12[2]);
	deoxys_encrypt(state11,TK11,14);
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) if (state11[r][c] != expected1[r][c]) {cout << "Test vector 1 (enc) failed!" << endl; exit(0);}
	}
	deoxys_decrypt(state11,TK12,14);
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) if (state11[r][c] != state12[r][c]) {cout << "Test vector 1 (dec) failed!" << endl; exit(0);}
	}
	
	// test vector 2
	uint8_t state21[4][4] = {{0xd4,0xe7,0xfc,0x00},{0x7c,0x9f,0x46,0x2d},{0x3c,0x2f,0x3e,0xe1},{0xc2,0xb9,0x25,0x97}};
	uint8_t state22[4][4] = {{0xd4,0xe7,0xfc,0x00},{0x7c,0x9f,0x46,0x2d},{0x3c,0x2f,0x3e,0xe1},{0xc2,0xb9,0x25,0x97}};
	uint8_t TK21[3][4][4] = 
	{{{0x20,0x00,0x00,0x00},{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00}},
	{{0x10,0x11,0x12,0x13},{0x14,0x15,0x16,0x17},{0x18,0x19,0x1a,0x1b},{0x1c,0x1d,0x1e,0x1f}},
	{{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00}}};
	uint8_t TK22[3][4][4] = 
	{{{0x20,0x00,0x00,0x00},{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00}},
	{{0x10,0x11,0x12,0x13},{0x14,0x15,0x16,0x17},{0x18,0x19,0x1a,0x1b},{0x1c,0x1d,0x1e,0x1f}},
	{{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00}}};
	uint8_t expected2[4][4] = {{0x7f,0xb3,0xd4,0x29},{0x1b,0xc8,0xba,0x08},{0x18,0x4e,0xfb,0xbd},{0xf9,0xa2,0x9b,0xe7}};
	transpose(state21); transpose(TK21[0]); transpose(TK21[1]); transpose(TK21[2]); transpose(expected2);
	transpose(state22); transpose(TK22[0]); transpose(TK22[1]); transpose(TK22[2]);
	deoxys_encrypt(state21,TK21,14);
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) if (state21[r][c] != expected2[r][c]) {cout << "Test vector 2 (enc) failed!" << endl; exit(0);}
	}
	deoxys_decrypt(state21,TK22,14);
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) if (state21[r][c] != state22[r][c]) {cout << "Test vector 2 (dec) failed!" << endl; exit(0);}
	}
	
	// test vector 3
	uint8_t state31[4][4] = {{0x00,0x01,0x02,0x03},{0x04,0x05,0x06,0x07},{0x08,0x09,0x0a,0x0b},{0x0c,0x0d,0x0e,0x0f}};
	uint8_t state32[4][4] = {{0x00,0x01,0x02,0x03},{0x04,0x05,0x06,0x07},{0x08,0x09,0x0a,0x0b},{0x0c,0x0d,0x0e,0x0f}};
	uint8_t TK31[3][4][4] = {
	{{0x20,0x00,0x00,0x00},{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00}}, 
	{{0x20,0x21,0x22,0x23},{0x24,0x25,0x26,0x27},{0x28,0x29,0x2a,0x2b},{0x2c,0x2d,0x2e,0x2f}},
	{{0x10,0x11,0x12,0x13},{0x14,0x15,0x16,0x17},{0x18,0x19,0x1a,0x1b},{0x1c,0x1d,0x1e,0x1f}}};
	uint8_t TK32[3][4][4] = {
	{{0x20,0x00,0x00,0x00},{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00}},
	{{0x20,0x21,0x22,0x23},{0x24,0x25,0x26,0x27},{0x28,0x29,0x2a,0x2b},{0x2c,0x2d,0x2e,0x2f}},
	{{0x10,0x11,0x12,0x13},{0x14,0x15,0x16,0x17},{0x18,0x19,0x1a,0x1b},{0x1c,0x1d,0x1e,0x1f}}};
	uint8_t expected3[4][4] = {{0xc3,0xc0,0x81,0x8d},{0x80,0x66,0xd6,0x64},{0x2d,0xfc,0x4c,0xcc},{0x9c,0xc5,0x47,0x8a}};
	transpose(state31); transpose(TK31[0]); transpose(TK31[1]); transpose(TK31[2]); transpose(expected3);
	transpose(state32); transpose(TK32[0]); transpose(TK32[1]); transpose(TK32[2]);
	deoxys_encrypt(state31,TK31,16);
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) if (state31[r][c] != expected3[r][c]) {cout << "Test vector 3 (enc) failed!" << endl; exit(0);}
	}
	deoxys_decrypt(state31,TK32,16);
	for (int r = 0; r < 4; r++)
	{
		for (int c = 0; c < 4; c++) if (state31[r][c] != state32[r][c]) {cout << "Test vector 3 (dec) failed!" << endl; exit(0);}
	}


	
}

// int main()
// {
// 	test_vectors();

// 	return 0;
// }